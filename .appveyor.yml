#
# Copyright (c) 2016 Marat Abrarov (abrarov@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

os: Visual Studio 2015

platform:
  - x64
  - Win32

configuration:
  - Debug
  - Release

environment:
  DEPENDENCIES_FOLDER: C:\projects\dependencies
  DOWNLOADS_FOLDER: C:\projects\downloads

  matrix:
    - MSVC_VERSION: 14.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: static
      QT_VERSION: 5.7
      QT_LINKAGE: shared
    - MSVC_VERSION: 14.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: shared
      QT_VERSION: 5.7
      QT_LINKAGE: shared
    - MSVC_VERSION: 12.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: static
      QT_VERSION: 5.7
      QT_LINKAGE: shared
    - MSVC_VERSION: 11.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: static
    - MSVC_VERSION: 10.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: static
      QT_VERSION: 4.8.7
      QT_LINKAGE: shared
    - MSVC_VERSION: 10.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.47.0
      BOOST_LINKAGE: static
      QT_VERSION: 4.8.7
      QT_LINKAGE: shared
    - MSVC_VERSION: 9.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.61.0
      BOOST_LINKAGE: static
    - MSVC_VERSION: 9.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.47.0
      BOOST_LINKAGE: static

install:
  - ps: |
      $env:WINDOWS_SDK_ENV_BATCH_FILE=""
      $env:WINDOWS_SDK_ENV_PARAMETERS=""
      $env:MSVS_HOME="${env:ProgramFiles(x86)}\Microsoft Visual Studio $env:MSVC_VERSION"
      $env:VCVARS_BATCH_FILE="$env:MSVS_HOME\VC\vcvarsall.bat"
      $env:MSVS_PATCH_FOLDER=""
      $env:MSVS_PATCH_BATCH_FILE=""
      switch ($env:PLATFORM) {
        "Win32" {
          $env:VCVARS_PLATFORM="x86"
        }
        "x64" {
          switch ($env:MSVC_VERSION) {
            "14.0" {
              $env:VCVARS_PLATFORM="amd64"
            }
            "12.0" {
              $env:VCVARS_PLATFORM="amd64"
            }
            "11.0" {
              $env:VCVARS_PLATFORM="x86_amd64"
            }
            "10.0" {
              $env:VCVARS_BATCH_FILE=""
              $env:WINDOWS_SDK_ENV_BATCH_FILE="$env:ProgramFiles\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd"
              $env:WINDOWS_SDK_ENV_PARAMETERS="/x64 /$env:CONFIGURATION"
            }
            "9.0" {
              Write-Host "Selected MSVS version ($env:MSVC_VERSION) and platform ($env:PLATFORM) require patching"
              $env:MSVS_PATCH_FOLDER="$env:DEPENDENCIES_FOLDER\vs2008_patch"
              if (!(Test-Path -Path "$env:MSVS_PATCH_FOLDER")) {
                $msvs_patch_download_folder="$env:DOWNLOADS_FOLDER\condaci"
                $msvs_patch_download_file="$msvs_patch_download_folder\vs2008_patch.zip"
                if (!(Test-Path -Path "$msvs_patch_download_file")) {
                  $msvs2008_patch_url="https://github.com/menpo/condaci.git"
                  $msvs2008_patch_revision="98d76b2089d494433ac2e3abd920123088a95a6d"
                  $msvs_patch_download_folder_nix="$msvs_patch_download_folder" -replace "\\", "/"
                  Write-Host "Going to download MSVS patch from: $msvs2008_patch_url to: $msvs_patch_download_folder_nix"
                  git clone --quiet "$msvs2008_patch_url" "$msvs_patch_download_folder_nix"
                  git -C "$msvs_patch_download_folder_nix" checkout --quiet "$msvs2008_patch_revision"
                  if ($LastExitCode -ne 0) {
                    throw "File downloading failed with exit code $LastExitCode."
                  }
                  Write-Host "Downloaded: $msvs_patch_download_file"
                }
                Write-Host "Extracting MSVS patch from: $msvs_patch_download_file to: $env:MSVS_PATCH_FOLDER"
                New-Item "$env:MSVS_PATCH_FOLDER" -type directory | out-null
                7z.exe x "$msvs_patch_download_file" -o"$env:MSVS_PATCH_FOLDER" -aoa -y | out-null
                if ($LastExitCode -ne 0) {
                  throw "File extraction failed with exit code $LastExitCode."
                }
                Write-Host "Extracted: $env:MSVS_PATCH_FOLDER"
              }
              $env:MSVS_PATCH_BATCH_FILE="$env:MSVS_PATCH_FOLDER\setup_x64.bat"
              $env:VCVARS_PLATFORM="x86_amd64"
            }
            default {
              throw "Unsupported MSVS version: $env:MSVC_VERSION"
            }
          }
        }
        default {
          throw "Unsupported platform: $env:PLATFORM"
        }
      }
      $pre_installed_boost=""
      switch ($env:MSVC_VERSION) {
        "14.0" {
          if ($env:BOOST_VERSION -eq "1.59.0" -or $env:BOOST_VERSION -eq "1.60.0") {
            $pre_installed_boost="true"
          }
        }
        "12.0" {
          if ($env:BOOST_VERSION -eq "1.58.0") {
            $pre_installed_boost="true"
          }
        }
      }
      if ($env:BOOST_VERSION) {
        if ($pre_installed_boost) {
          $boost_home="C:\Libraries\boost"
          if (!($env:BOOST_VERSION -eq "1.56.0")) {
            $boost_home_version_suffix="_$env:BOOST_VERSION" -replace "\.", '_'
            $boost_home="$boost_home$boost_home_version_suffix"
          }
          $boost_library_folder_platform_suffix=""
          switch ($env:PLATFORM) {
            "Win32" {
              $boost_library_folder_platform_suffix="lib32"
            }
            "x64" {
              $boost_library_folder_platform_suffix="lib64"
            }
            default {
              throw "Unsupported platform: $env:PLATFORM"
            }
          }
          $boost_library_folder_toolchain_suffix="-msvc-$env:MSVC_VERSION"
          $env:BOOST_INCLUDE_FOLDER="$boost_home"
          $env:BOOST_LIBRARY_FOLDER="$boost_home\$boost_library_folder_platform_suffix$boost_library_folder_toolchain_suffix"
        } else {
          $boost_platform_suffix=""
          switch ($env:PLATFORM) {
            "Win32" {
              $boost_platform_suffix="-x86"
            }
            "x64" {
              $boost_platform_suffix="-x64"
            }
            default {
              throw "Unsupported platform: $env:PLATFORM"
            }
          }
          $boost_version_suffix="-$env:BOOST_VERSION"
          $boost_toolchain_suffix=""
          switch ($env:MSVC_VERSION) {
            "14.0" {
              $boost_toolchain_suffix="-vs2015"
            }
            "12.0" {
              $boost_toolchain_suffix="-vs2013"
            }
            "11.0" {
              $boost_toolchain_suffix="-vs2012"
            }
            "10.0" {
              $boost_toolchain_suffix="-vs2010"
            }
            "9.0" {
              $boost_toolchain_suffix="-vs2008"
            }
            default {
              throw "Unsupported MSVS version: $env:MSVC_VERSION"
            }
          }
          $boost_install_folder="$env:DEPENDENCIES_FOLDER\boost$boost_version_suffix$boost_platform_suffix$boost_toolchain_suffix"
          if (!(Test-Path -Path "$boost_install_folder")) {
            Write-Host "Built Boost libraries are absent for the selected toolchain (msvc-$env:MSVC_VERSION) and Boost version ($env:BOOST_VERSION)"
            $boost_archive_name="boost$boost_version_suffix$boost_platform_suffix$boost_toolchain_suffix.7z"
            $boost_archive_file="$env:DOWNLOADS_FOLDER\$boost_archive_name"
            if (!(Test-Path -Path "$boost_archive_file")) {
              $boost_download_url="https://dl.bintray.com/mabrarov/generic/boost/$env:BOOST_VERSION/$boost_archive_name"
              if (!(Test-Path -Path "$env:DOWNLOADS_FOLDER")) {
                New-Item "$env:DOWNLOADS_FOLDER" -type directory | out-null
              }
              Write-Host "Going to download pre-built Boost libraries from: $boost_download_url to: $boost_archive_file"
              curl.exe --max-time 600 --show-error --silent --location --output "$boost_archive_file" "$boost_download_url"
              if ($LastExitCode -ne 0) {
                throw "File downloading failed with exit code $LastExitCode."
              }
              Write-Host "Downloaded: $boost_archive_file"
            }
            Write-Host "Extracting pre-built Boost libraries from: $boost_archive_file to: $env:DEPENDENCIES_FOLDER"
            if (!(Test-Path -Path "$env:DEPENDENCIES_FOLDER")) {
              New-Item "$env:DEPENDENCIES_FOLDER" -type directory | out-null
            }
            7z.exe x "$boost_archive_file" -o"$env:DEPENDENCIES_FOLDER" -aoa -y | out-null
            if ($LastExitCode -ne 0) {
              throw "File extraction failed with exit code $LastExitCode."
            }
            Write-Host "Extracted: $boost_install_folder"
          }
          $boost_include_folder_version_suffix="-$env:BOOST_VERSION" -replace "([\d]+)\.([\d]+)(\.[\d]+)*", '$1_$2'
          $env:BOOST_INCLUDE_FOLDER="$boost_install_folder\include\boost$boost_include_folder_version_suffix"
          $env:BOOST_LIBRARY_FOLDER="$boost_install_folder\lib"
        }
        if ($env:RUNTIME_LINKAGE -eq "static" -and -not ($env:BOOST_LINKAGE -eq "static")) {
          throw "Incompatible type of linkage of Boost: $env:BOOST_LINKAGE for the specified type of linkage of C/C++ runtime: $env:RUNTIME_LINKAGE"
        }
        switch ($env:BOOST_LINKAGE) {
          "static" {
            $env:BOOST_USE_STATIC_LIBS="ON"
          }
          "shared" {
            $env:BOOST_USE_STATIC_LIBS="OFF"
          }
          default {
            throw "Unsupported type of linkage of Boost: $env:BOOST_LINKAGE"
          }
        }
      }
      if ($env:QT_VERSION) {
        $pre_installed_qt=""
        if ($env:QT_LINKAGE -eq "shared") {
          switch ($env:MSVC_VERSION) {
            "14.0" {
              switch ($env:QT_VERSION) {
                "5.7" {
                  $pre_installed_qt="true"
                }
                "5.6" {
                  $pre_installed_qt="true"
                }
              }
            }
            "12.0" {
              switch ($env:QT_VERSION) {
                "5.7" {
                  $pre_installed_qt="true"
                }
                "5.6" {
                  $pre_installed_qt="true"
                }
                "5.5" {
                  $pre_installed_qt="true"
                }
                "5.4" {
                  $pre_installed_qt="true"
                }
                "5.3" {
                  $pre_installed_qt="true"
                }
              }
            }
          }
        }
        if ($pre_installed_qt) {
          $qt_folder_toolchain_suffix=""
          switch ($env:MSVC_VERSION) {
            "14.0" {
              $qt_folder_toolchain_suffix="msvc2015"
            }
            "12.0" {
              $qt_folder_toolchain_suffix="msvc2013"
            }
            "11.0" {
              $qt_folder_toolchain_suffix="msvc2012"
            }
            "10.0" {
              $qt_folder_toolchain_suffix="msvc2010"
            }
            "9.0" {
              $qt_folder_toolchain_suffix="msvc2008"
            }
            default {
              throw "Unsupported MSVS version: $env:MSVC_VERSION"
            }
          }
          $qt_folder_platform_suffix=""
          switch ($env:PLATFORM) {
            "Win32" {
              $qt_folder_platform_suffix=""
            }
            "x64" {
              $qt_folder_platform_suffix="_64"
            }
            default {
              throw "Unsupported platform: $env:PLATFORM"
            }
          }
          $qt_opengl_suffix=""
          switch ($env:QT_VERSION) {
            "5.4" {
              $qt_opengl_suffix="_opengl"
            }
            "5.3" {
              $qt_opengl_suffix="_opengl"
            }
          }
          $env:QT_HOME="C:\Qt\$env:QT_VERSION\$qt_folder_toolchain_suffix$qt_folder_platform_suffix$qt_opengl_suffix"
          $env:QT_BIN_FOLDER="$env:QT_HOME\bin"
          $env:QT_QMAKE_EXECUTABLE="$env:QT_BIN_FOLDER\qmake.exe"
        } else {
          $qt_platform_suffix=""
          switch ($env:PLATFORM) {
            "Win32" {
              $qt_platform_suffix="-x86"
            }
            "x64" {
              $qt_platform_suffix="-x64"
            }
            default {
              throw "Unsupported platform: $env:PLATFORM"
            }
          }
          $qt_version_suffix="-$env:QT_VERSION"
          $qt_toolchain_suffix=""
          switch ($env:MSVC_VERSION) {
            "14.0" {
              $qt_toolchain_suffix="-vs2015"
            }
            "12.0" {
              $qt_toolchain_suffix="-vs2013"
            }
            "11.0" {
              $qt_toolchain_suffix="-vs2012"
            }
            "10.0" {
              $qt_toolchain_suffix="-vs2010"
            }
            "9.0" {
              $qt_toolchain_suffix="-vs2008"
            }
            default {
              throw "Unsupported MSVS version: $env:MSVC_VERSION"
            }
          }
          $qt_linkage_suffix=""
          switch ($env:QT_LINKAGE) {
            "shared" {
              $qt_linkage_suffix="-shared"
            }
            "static" {
              $qt_linkage_suffix="-static"
            }
            default {
              $qt_linkage_suffix="-shared"
            }
          }
          $qt_install_folder="$env:DEPENDENCIES_FOLDER\qt$qt_version_suffix$qt_platform_suffix$qt_toolchain_suffix$qt_linkage_suffix"
          if (!(Test-Path -Path "$qt_install_folder")) {
            Write-Host "Built Qt libraries are absent for the selected toolchain (msvc-$env:MSVC_VERSION) and Qt version ($env:QT_VERSION)"
            $qt_archive_name="qt$qt_version_suffix$qt_platform_suffix$qt_toolchain_suffix$qt_linkage_suffix.7z"
            $qt_archive_file="$env:DOWNLOADS_FOLDER\$qt_archive_name"
            if (!(Test-Path -Path "$qt_archive_file")) {
              $qt_download_url="https://dl.bintray.com/mabrarov/generic/qt/$env:QT_VERSION/$qt_archive_name"
              if (!(Test-Path -Path "$env:DOWNLOADS_FOLDER")) {
                New-Item "$env:DOWNLOADS_FOLDER" -type directory | out-null
              }
              Write-Host "Going to download pre-built Qt libraries from: $qt_download_url to: $qt_archive_file"
              curl.exe --max-time 600 --show-error --silent --location --output "$qt_archive_file" "$qt_download_url"
              if ($LastExitCode -ne 0) {
                throw "File downloading failed with exit code $LastExitCode."
              }
              Write-Host "Downloaded: $qt_archive_file"
            }
            Write-Host "Extracting pre-built Qt libraries from: $qt_archive_file to: $env:DEPENDENCIES_FOLDER"
            if (!(Test-Path -Path "$env:DEPENDENCIES_FOLDER")) {
              New-Item "$env:DEPENDENCIES_FOLDER" -type directory | out-null
            }
            7z.exe x "$qt_archive_file" -o"$env:DEPENDENCIES_FOLDER" -aoa -y | out-null
            if ($LastExitCode -ne 0) {
              throw "File extraction failed with exit code $LastExitCode."
            }
            Write-Host "Extracted: $qt_install_folder"
          }
          $env:QT_HOME="$qt_install_folder"
          $env:QT_BIN_FOLDER="$qt_install_folder\bin"
          $env:QT_QMAKE_EXECUTABLE="$env:QT_BIN_FOLDER\qmake.exe"
        }
      }
      switch ($env:CONFIGURATION) {
        "Debug" {
          $env:CMAKE_BUILD_CONFIG="DEBUG"
        }
        "Release" {
          $env:CMAKE_BUILD_CONFIG="RELEASE"
        }
        default {
          throw "Unsupported build configuration: $env:CONFIGURATION"
        }
      }
      $cmake_generator_msvc_version_suffx=" $env:MSVC_VERSION" -replace "([\d]+)\.([\d]+)", '$1'
      switch ($env:MSVC_VERSION) {
        "14.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2015"
        }
        "12.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2013"
        }
        "11.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2012"
        }
        "10.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2010"
        }
        "9.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2008"
        }
        default {
          throw "Unsupported MSVS version: $env:MSVC_VERSION"
        }
      }
      $cmake_generator_platform_suffix=""
      switch ($env:PLATFORM) {
        "Win32" {
          $cmake_generator_platform_suffix=""
        }
        "x64" {
          $cmake_generator_platform_suffix=" Win64"
        }
        default {
          throw "Unsupported platform: $env:PLATFORM"
        }
      }
      $env:CMAKE_GENERATOR="Visual Studio$cmake_generator_msvc_version_suffx$cmake_generator_platform_suffix"

before_build:
  - ps: |
      Write-Host "PLATFORM                  : $env:PLATFORM"
      Write-Host "CONFIGURATION             : $env:CONFIGURATION"
      Write-Host "MSVS_PATCH_FOLDER         : $env:MSVS_PATCH_FOLDER"
      Write-Host "MSVS_PATCH_BATCH_FILE     : $env:MSVS_PATCH_BATCH_FILE"
      Write-Host "WINDOWS_SDK_ENV_BATCH_FILE: $env:WINDOWS_SDK_ENV_BATCH_FILE"
      Write-Host "WINDOWS_SDK_ENV_PARAMETERS: $env:WINDOWS_SDK_ENV_PARAMETERS"
      Write-Host "VCVARS_BATCH_FILE         : $env:VCVARS_BATCH_FILE"
      Write-Host "VCVARS_PLATFORM           : $env:VCVARS_PLATFORM"
      Write-Host "APPVEYOR_BUILD_FOLDER     : $env:APPVEYOR_BUILD_FOLDER"
      Write-Host "BOOST_INCLUDE_FOLDER      : $env:BOOST_INCLUDE_FOLDER"
      Write-Host "BOOST_LIBRARY_FOLDER      : $env:BOOST_LIBRARY_FOLDER"
      Write-Host "BOOST_USE_STATIC_LIBS     : $env:BOOST_USE_STATIC_LIBS"
      Write-Host "QT_HOME                   : $env:QT_HOME"
      Write-Host "QT_BIN_FOLDER             : $env:QT_BIN_FOLDER"
      Write-Host "QT_QMAKE_EXECUTABLE       : $env:QT_QMAKE_EXECUTABLE"
      Write-Host "CMAKE_GENERATOR           : $env:CMAKE_GENERATOR"
  - cmd: if not "%MSVS_PATCH_FOLDER%"=="" cd /d "%MSVS_PATCH_FOLDER%"
  - cmd: if not "%MSVS_PATCH_BATCH_FILE%"=="" call "%MSVS_PATCH_BATCH_FILE%"
  - cmd: if not "%WINDOWS_SDK_ENV_BATCH_FILE%"=="" call "%WINDOWS_SDK_ENV_BATCH_FILE%" %WINDOWS_SDK_ENV_PARAMETERS%
  - cmd: if not "%VCVARS_BATCH_FILE%"=="" call "%VCVARS_BATCH_FILE%" %VCVARS_PLATFORM%
  - ps: |
      if ($env:QT_VERSION) {
        $env:PATH="$env:QT_BIN_FOLDER;$env:PATH"
      }
      if ($env:BOOST_VERSION -and ($env:BOOST_LINKAGE -eq "shared")) {
        $env:PATH="$env:BOOST_LIBRARY_FOLDER;$env:PATH"
      }

build_script:
  - ps: |
      New-Item "$env:APPVEYOR_BUILD_FOLDER\build" -type directory | out-null
      Set-Location -Path "$env:APPVEYOR_BUILD_FOLDER\build"
      switch ($env:RUNTIME_LINKAGE) {
        "shared" {
          if (!($env:QT_VERSION)) {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D gtest_force_shared_crt=ON -D ma_qt=OFF -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "5\.*") {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D Qt5Core_DIR=$env:QT_HOME\lib\cmake\Qt5Core -D Qt5Gui_DIR=$env:QT_HOME\lib\cmake\Qt5Gui -D Qt5Widgets_DIR=$env:QT_HOME\lib\cmake\Qt5Widgets -D gtest_force_shared_crt=ON -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "4\.*") {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D QT_QMAKE_EXECUTABLE=$env:QT_QMAKE_EXECUTABLE -D gtest_force_shared_crt=ON -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } else {
            throw "Unsupported version of Qt: $env:QT_VERSION."
          }
        }
        "static" {
          if (!($env:QT_VERSION)) {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D ma_qt=OFF -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "5\.*") {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D Qt5Core_DIR=$env:QT_HOME\lib\cmake\Qt5Core -D Qt5Gui_DIR=$env:QT_HOME\lib\cmake\Qt5Gui -D Qt5Widgets_DIR=$env:QT_HOME\lib\cmake\Qt5Widgets -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "4\.*") {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D QT_QMAKE_EXECUTABLE=$env:QT_QMAKE_EXECUTABLE -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } else {
            throw "Unsupported version of Qt: $env:QT_VERSION."
          }
        }
        default {
          throw "Unsupported type of linkage of C/C++ runtime: $env:RUNTIME_LINKAGE"
        }
      }
      if ($LastExitCode -ne 0) {
        throw "Generation of project failed with exit code $LastExitCode."
      }
      switch ($env:MSVC_VERSION) {
        "9.0" {
          cmake --build . --config $env:CONFIGURATION
        }
        default {
          cmake --build . --config $env:CONFIGURATION -- /maxcpucount /verbosity:normal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        }
      }
      if ($LastExitCode -ne 0) {
        throw "Build failed with exit code $LastExitCode."
      }

test_script:
  - cmd: cd /d "%APPVEYOR_BUILD_FOLDER%\build"
  - cmd: ctest --build-config %CONFIGURATION% --verbose

artifacts:
  - path: build\example\ma_asio_performance_test_client\$(configuration)\*.exe
    name: ma_asio_performance_test_client
  - path: build\example\ma_async_basics\$(configuration)\*.exe
    name: ma_async_basics
  - path: build\example\ma_async_basics2\$(configuration)\*.exe
    name: ma_async_basics2
  - path: build\example\ma_echo_server\$(configuration)\*.exe
    name: ma_echo_server
  - path: build\example\ma_nmea_client\$(configuration)\*.exe
    name: ma_nmea_client
  - path: build\example\ma_qt_echo_server\$(configuration)\*.exe
    name: ma_qt_echo_server
  - path: build\test\ma_async_connect_test\$(configuration)\*.exe
    name: ma_async_connect_test
  - path: build\test\ma_handler_storage_test\$(configuration)\*.exe
    name: ma_handler_storage_test
  - path: build\test\ma_lockable_wrapper_test\$(configuration)\*.exe
    name: ma_lockable_wrapper_test
  - path: build\test\ma_shared_ptr_factory_test\$(configuration)\*.exe
    name: ma_shared_ptr_factory_test
  - path: build\test\ma_sp_singleton_test\$(configuration)\*.exe
    name: ma_sp_singleton_test
  - path: build\test\ma_windows_console_signal_test\$(configuration)\*.exe
    name: ma_windows_console_signal_test
  - path: build\test\ma_handler_allocator_test\$(configuration)\*.exe
    name: ma_handler_allocator_test
  - path: build\test\ma_custom_alloc_handler_test\$(configuration)\*.exe
    name: ma_custom_alloc_handler_test
