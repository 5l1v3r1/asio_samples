#
# Copyright (c) 2016 Marat Abrarov (abrarov@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

os: Visual Studio 2015

platform:
  - x64
  - Win32

configuration:
  - Debug
  - Release

environment:
  DEPENDENCIES_FOLDER: C:\projects\dependencies
  DOWNLOADS_FOLDER: C:\projects\downloads

  matrix:
    - MSVC_VERSION: 14.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.60.0
      BOOST_LINKAGE: static
      QT_VERSION: none
    - MSVC_VERSION: 12.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.60.0
      BOOST_LINKAGE: static
      QT_VERSION: none
    - MSVC_VERSION: 11.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.60.0
      BOOST_LINKAGE: static
      QT_VERSION: none
    - MSVC_VERSION: 10.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.60.0
      BOOST_LINKAGE: static
      QT_VERSION: none
    - MSVC_VERSION: 9.0
      RUNTIME_LINKAGE: static
      BOOST_VERSION: 1.60.0
      BOOST_LINKAGE: static
      QT_VERSION: none
    - MSVC_VERSION: 14.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.59.0
      BOOST_LINKAGE: static
      QT_VERSION: 5.6
    - MSVC_VERSION: 14.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.59.0
      BOOST_LINKAGE: shared
      QT_VERSION: 5.6
    - MSVC_VERSION: 12.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.58.0
      BOOST_LINKAGE: static
      QT_VERSION: 5.5
    - MSVC_VERSION: 12.0
      RUNTIME_LINKAGE: shared
      BOOST_VERSION: 1.58.0
      BOOST_LINKAGE: shared
      QT_VERSION: 5.5

install:
  - ps: |
      $pre_installed_boost=""
      if ((($env:MSVC_VERSION -Eq "14.0") -and ($env:BOOST_VERSION -eq "1.59.0")) -or (($env:MSVC_VERSION -eq "12.0") -and ($env:BOOST_VERSION -eq "1.58.0"))) {
        $pre_installed_boost="true"
      }
      $pre_installed_qt="true"
      if (-not $pre_installed_boost) {
        $boost_platform_suffix=""
        switch ($env:PLATFORM) {
          "Win32" {
            $boost_platform_suffix="-x86"
          }
          "x64" {
            $boost_platform_suffix="-x64"
          }
          default {
            throw "Unsupported platform: $env:PLATFORM"
          }
        }
        $boost_version_suffix="-$env:BOOST_VERSION"
        $boost_toolchain_suffix=""
        switch ($env:MSVC_VERSION) {
          "14.0" {
            $boost_toolchain_suffix="-vs2015"
          }
          "12.0" {
            $boost_toolchain_suffix="-vs2013"
          }
          "11.0" {
            $boost_toolchain_suffix="-vs2012"
          }
          "10.0" {
            $boost_toolchain_suffix="-vs2010"
          }
          "9.0" {
            $boost_toolchain_suffix="-vs2008"
          }
          default {
            throw "Unsupported MSVS version: $env:MSVC_VERSION"
          }
        }
        $boost_install_folder="$env:DEPENDENCIES_FOLDER\boost$boost_version_suffix$boost_platform_suffix$boost_toolchain_suffix"
        if (!(Test-Path -Path $boost_install_folder)) {
          Write-Host "Built boost libraries are absent for the selected toolchain (msvc-$env:MSVC_VERSION) and Boost version ($env:BOOST_VERSION)"
          $boost_archive_file="$env:DOWNLOADS_FOLDER\boost$boost_version_suffix$boost_platform_suffix$boost_toolchain_suffix.7z"
          if (!(Test-Path -Path $boost_archive_file)) {
            $boost_download_url_base="https://onedrive.live.com/download?resid="
            $boost_download_url_file_id=""
            switch ($env:BOOST_VERSION) {
              "1.60.0" {
                switch ($env:PLATFORM) {
                  "Win32" {
                    switch ($env:MSVC_VERSION) {
                      "14.0" {
                        $boost_download_url_file_id="166647600C1002F5!336&authkey=!AFGYYm3z6xdou2A&ithint=file%2c7z"
                      }
                      "12.0" {
                        $boost_download_url_file_id="166647600C1002F5!341&authkey=!APP3kmIzQXoNmMY&ithint=file%2c7z"
                      }
                      "11.0" {
                        $boost_download_url_file_id="166647600C1002F5!340&authkey=!AFwtmw0Ai1W5YE8&ithint=file%2c7z"
                      }
                      "10.0" {
                        $boost_download_url_file_id="166647600C1002F5!334&authkey=!AI-Q0UA2QBQuEJk&ithint=file%2c7z"
                      }
                      "9.0" {
                        $boost_download_url_file_id="166647600C1002F5!335&authkey=!AIF0rCOlLfXVi5o&ithint=file%2c7z"
                      }
                      default {
                        throw "Unsupported MSVS version: $env:MSVC_VERSION"
                      }
                    }
                  }
                  "x64" {
                    switch ($env:MSVC_VERSION) {
                      "14.0" {
                        $boost_download_url_file_id="166647600C1002F5!339&authkey=!ALvDr64oQETUJQg&ithint=file%2c7z"
                      }
                      "12.0" {
                        $boost_download_url_file_id="166647600C1002F5!342&authkey=!ACDxp2cFsv7Mi-E&ithint=file%2c7z"
                      }
                      "11.0" {
                        $boost_download_url_file_id="166647600C1002F5!338&authkey=!ADjmmkN_Vucxwqc&ithint=file%2c7z"
                      }
                      "10.0" {
                        $boost_download_url_file_id="166647600C1002F5!333&authkey=!AL7oKBxNQncEBK4&ithint=file%2c7z"
                      }
                      "9.0" {
                        $boost_download_url_file_id="166647600C1002F5!337&authkey=!AMBtcaUWpyPjqog&ithint=file%2c7z"
                      }
                      default {
                        throw "Unsupported MSVS version: $env:MSVC_VERSION"
                      }
                    }
                  }
                  default {
                    throw "Unsupported platform: $env:PLATFORM"
                  }
                }
              }
              default {
                throw "Unsupported version of Boost: $env:BOOST_VERSION"
              }
            }
            $boost_download_url="$boost_download_url_base$boost_download_url_file_id"
            if (!(Test-Path -Path $env:DOWNLOADS_FOLDER)) {
              New-Item $env:DOWNLOADS_FOLDER -type directory | out-null
            }
            Write-Host "Going to download pre-built Boost libraries from: $boost_download_url to: $boost_archive_file"
            Invoke-WebRequest $boost_download_url -OutFile $boost_archive_file
          }
          Write-Host "Extracting pre-built Boost libraries from: $boost_archive_file to: $env:DEPENDENCIES_FOLDER"
          if (!(Test-Path -Path $env:DEPENDENCIES_FOLDER)) {
            New-Item $env:DEPENDENCIES_FOLDER -type directory | out-null
          }
          7z x "$boost_archive_file" -o"$env:DEPENDENCIES_FOLDER" -aoa -y | out-null
          if ($LastExitCode -ne 0) {
            throw "File extraction failed with exit code $LastExitCode."
          }
        }
        $boost_include_folder_version_suffix="-$env:BOOST_VERSION" -replace "([\d]+)\.([\d]+)(\.[\d]+)*", '$1_$2'
        $env:BOOST_INCLUDE_FOLDER="$boost_install_folder\include\boost$boost_include_folder_version_suffix"
        $env:BOOST_LIBRARY_FOLDER="$boost_install_folder\lib"
      }
      $env:WINDOWS_SDK_ENV_BATCH_FILE=""
      $env:WINDOWS_SDK_ENV_PARAMETERS=""
      $env:MSVS_HOME="%ProgramFiles(x86)%\Microsoft Visual Studio $env:MSVC_VERSION"
      $env:VCVARS_BATCH_FILE="$env:MSVS_HOME\VC\vcvarsall.bat"
      $env:MSVS_PATCH_FOLDER=""
      $env:MSVS_PATCH_BATCH_FILE=""
      switch ($env:PLATFORM) {
        "Win32" {
          $env:VCVARS_PLATFORM="x86"
        }
        "x64" {
          switch ($env:MSVC_VERSION) {
            "14.0" {
              $env:VCVARS_PLATFORM="amd64"
            }
            "12.0" {
              $env:VCVARS_PLATFORM="amd64"
            }
            "11.0" {
              $env:VCVARS_PLATFORM="x86_amd64"
            }
            "10.0" {
              $env:VCVARS_BATCH_FILE=""
              $env:WINDOWS_SDK_ENV_BATCH_FILE="%ProgramFiles%\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd"
              $env:WINDOWS_SDK_ENV_PARAMETERS="/x64 /$env:CONFIGURATION"
            }
            "9.0" {
              Write-Host "Selected MSVS version: $env:MSVC_VERSION and platform: $env:PLATFORM require patching"
              $env:MSVS_PATCH_FOLDER="$env:DEPENDENCIES_FOLDER\vs2008_patch"
              if (!(Test-Path -Path $env:MSVS_PATCH_FOLDER)) {
                $msvs2008_patch_file="$env:DOWNLOADS_FOLDER\vs2008_patch.zip"
                if (!(Test-Path -Path $msvs2008_patch_file)) {
                  $msvs2008_patch_url="https://github.com/menpo/condaci/blob/master/vs2008_patch.zip?raw=true"
                  Write-Host "Going to download MSVS patch from: $msvs2008_patch_url to: $msvs2008_patch_file"
                  Invoke-WebRequest $msvs2008_patch_url -OutFile $msvs2008_patch_file
                }
                Write-Host "Extracting MSVS patch from: $msvs2008_patch_file to: $env:MSVS_PATCH_FOLDER"
                New-Item $env:MSVS_PATCH_FOLDER -type directory | out-null
                7z x "$msvs2008_patch_file" -o"$env:MSVS_PATCH_FOLDER" -aoa -y | out-null
              }
              $env:MSVS_PATCH_BATCH_FILE="$env:MSVS_PATCH_FOLDER\setup_x64.bat"
              $env:VCVARS_PLATFORM="x86_amd64"
            }
            default {
              throw "Unsupported MSVS version: $env:MSVC_VERSION"
            }
          }
        }
        default {
          throw "Unsupported platform: $env:PLATFORM"
        }
      }
      if ($pre_installed_boost) {
        $boost_home=""
        switch ($env:BOOST_VERSION) {
          "1.59.0" {
            $boost_home="C:\Libraries\boost_1_59_0"
          }
          "1.58.0" {
            $boost_home="C:\Libraries\boost_1_58_0"
          }
          "1.56.0" {
            $boost_home="C:\Libraries\boost"
          }
          default {
            throw "Unsupported version of Boost: $env:BOOST_VERSION"
          }
        }
        $boost_library_folder_platform_suffix=""
        switch ($env:PLATFORM) {
          "Win32" {
            $boost_library_folder_platform_suffix="lib32"
          }
          "x64" {
            $boost_library_folder_platform_suffix="lib64"
          }
          default {
            throw "Unsupported platform: $env:PLATFORM"
          }
        }
        $boost_library_folder_toolchain_suffix="-msvc-$env:MSVC_VERSION"
        $env:BOOST_INCLUDE_FOLDER="$boost_home"
        $env:BOOST_LIBRARY_FOLDER="$boost_home\$boost_library_folder_platform_suffix$boost_library_folder_toolchain_suffix"
      }
      if ($env:RUNTIME_LINKAGE -eq "static" -and -not ($env:BOOST_LINKAGE -eq "static")) {
        throw "Incompatible type of linkage of Boost: $env:BOOST_LINKAGE for the specified type of linkage of C/C++ runtime: $env:RUNTIME_LINKAGE"
      }
      switch ($env:BOOST_LINKAGE) {
        "static" {
          $env:BOOST_USE_STATIC_LIBS="ON"
        }
        "shared" {
          $env:BOOST_USE_STATIC_LIBS="OFF"
        }
        default {
          throw "Unsupported type of linkage of Boost: $env:BOOST_LINKAGE"
        }
      }
      if ($pre_installed_qt) {
        $qt_folder_platform_suffix=""
        switch ($env:PLATFORM) {
          "Win32" {
            $qt_folder_platform_suffix=""
          }
          "x64" {
            $qt_folder_platform_suffix="_64"
          }
          default {
            throw "Unsupported platform: $env:PLATFORM"
          }
        }
        $qt_folder_toolchain_suffix=""
        switch ($env:MSVC_VERSION) {
          "14.0" {
            $qt_folder_toolchain_suffix="msvc2015"
          }
          "12.0" {
            $qt_folder_toolchain_suffix="msvc2013"
          }
          "11.0" {
            $qt_folder_toolchain_suffix="msvc2012"
          }
          "10.0" {
            $qt_folder_toolchain_suffix="msvc2010"
          }
          "9.0" {
            $qt_folder_toolchain_suffix="msvc2008"
          }
          default {
            throw "Unsupported MSVS version: $env:MSVC_VERSION"
          }
        }
        $env:QT_HOME="C:\Qt\$env:QT_VERSION\$qt_folder_toolchain_suffix$qt_folder_platform_suffix"
        $env:QT_BIN_FOLDER="$env:QT_HOME\bin"
      }
      switch ($env:CONFIGURATION) {
        "Debug" {
          $env:CMAKE_BUILD_CONFIG="DEBUG"
        }
        "Release" {
          $env:CMAKE_BUILD_CONFIG="RELEASE"
        }
        default {
          throw "Unsupported build configuration: $env:CONFIGURATION"
        }
      }
      $cmake_generator_msvc_version_suffx=" $env:MSVC_VERSION" -replace "([\d]+)\.([\d]+)", '$1'
      switch ($env:MSVC_VERSION) {
        "14.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2015"
        }
        "12.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2013"
        }
        "11.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2012"
        }
        "10.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2010"
        }
        "9.0" {
          $cmake_generator_msvc_version_suffx="$cmake_generator_msvc_version_suffx 2008"
        }
        default {
          throw "Unsupported MSVS version: $env:MSVC_VERSION"
        }
      }
      $cmake_generator_platform_suffix=""
      switch ($env:PLATFORM) {
        "Win32" {
          $cmake_generator_platform_suffix=""
        }
        "x64" {
          $cmake_generator_platform_suffix=" Win64"
        }
        default {
          throw "Unsupported platform: $env:PLATFORM"
        }
      }
      $env:CMAKE_GENERATOR="Visual Studio$cmake_generator_msvc_version_suffx$cmake_generator_platform_suffix"

before_build:
  - cmd: if not "%MSVS_PATCH_FOLDER%"=="" cd /d "%MSVS_PATCH_FOLDER%"
  - cmd: if not "%MSVS_PATCH_BATCH_FILE%"=="" call "%MSVS_PATCH_BATCH_FILE%"
  - cmd: if not "%WINDOWS_SDK_ENV_BATCH_FILE%"=="" call "%WINDOWS_SDK_ENV_BATCH_FILE%" %WINDOWS_SDK_ENV_PARAMETERS%
  - cmd: if not "%VCVARS_BATCH_FILE%"=="" call "%VCVARS_BATCH_FILE%" %VCVARS_PLATFORM%
  - ps: |
      if (!($env:QT_VERSION -eq "none")) {
        $env:PATH="$env:QT_BIN_FOLDER;$env:PATH"
      }
      if ($env:BOOST_LINKAGE -eq "shared") {
        $env:PATH="$env:BOOST_LIBRARY_FOLDER;$env:PATH"
      }

build_script:
  - ps: |
      New-Item "$env:APPVEYOR_BUILD_FOLDER\build" -type directory | out-null
      Set-Location -Path "$env:APPVEYOR_BUILD_FOLDER\build"
      switch ($env:RUNTIME_LINKAGE) {
        "shared" {
          if ($env:QT_VERSION -match "5\.*") {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D Qt5Core_DIR=$env:QT_HOME\lib\cmake\Qt5Core -D Qt5Gui_DIR=$env:QT_HOME\lib\cmake\Qt5Gui -D Qt5Widgets_DIR=$env:QT_HOME\lib\cmake\Qt5Widgets -D gtest_force_shared_crt=ON -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "4\.*") {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D QT_QMAKE_EXECUTABLE=$env:QT_QMAKE_EXECUTABLE -D gtest_force_shared_crt=ON -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -eq "none") {
            cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D gtest_force_shared_crt=ON -D ma_qt=OFF -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } else {
            throw "Unsupported version of Qt: $env:QT_VERSION."
          }
        }
        "static" {
          if ($env:QT_VERSION -match "5\.*") {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D Qt5Core_DIR=$env:QT_HOME\lib\cmake\Qt5Core -D Qt5Gui_DIR=$env:QT_HOME\lib\cmake\Qt5Gui -D Qt5Widgets_DIR=$env:QT_HOME\lib\cmake\Qt5Widgets -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -match "4\.*") {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D QT_QMAKE_EXECUTABLE=$env:QT_QMAKE_EXECUTABLE -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } elseif ($env:QT_VERSION -eq "none") {
            cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE=$env:APPVEYOR_BUILD_FOLDER\cmake\static_c_runtime_overrides.cmake -D CMAKE_USER_MAKE_RULES_OVERRIDE_CXX=$env:APPVEYOR_BUILD_FOLDER\cmake\static_cxx_runtime_overrides.cmake -D BOOST_INCLUDEDIR=$env:BOOST_INCLUDE_FOLDER -D BOOST_LIBRARYDIR=$env:BOOST_LIBRARY_FOLDER -D Boost_USE_STATIC_LIBS=$env:BOOST_USE_STATIC_LIBS -D Boost_NO_SYSTEM_PATHS=ON -D ma_qt=OFF -G "$env:CMAKE_GENERATOR" $env:APPVEYOR_BUILD_FOLDER
          } else {
            throw "Unsupported version of Qt: $env:QT_VERSION."
          }
        }
        default {
          throw "Unsupported type of linkage of C/C++ runtime: $env:RUNTIME_LINKAGE"
        }
      }
      if ($LastExitCode -ne 0) {
        throw "Generation of project failed with exit code $LastExitCode."
      }
      switch ($env:MSVC_VERSION) {
        "9.0" {
          cmake --build . --config $env:CONFIGURATION
        }
        default {
          cmake --build . --config $env:CONFIGURATION -- /maxcpucount /verbosity:normal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
        }
      }
      if ($LastExitCode -ne 0) {
        throw "Build failed with exit code $LastExitCode."
      }

test_script:
  - cmd: cd /d "%APPVEYOR_BUILD_FOLDER%\build"
  - cmd: ctest --build-config %CONFIGURATION% --verbose

artifacts:
  - path: build\example\ma_asio_performance_test_client\$(configuration)\*.exe
    name: ma_asio_performance_test_client
  - path: build\example\ma_async_basics\$(configuration)\*.exe
    name: ma_async_basics
  - path: build\example\ma_async_basics2\$(configuration)\*.exe
    name: ma_async_basics2
  - path: build\example\ma_echo_server\$(configuration)\*.exe
    name: ma_echo_server
  - path: build\example\ma_nmea_client\$(configuration)\*.exe
    name: ma_nmea_client
  - path: build\example\ma_qt_echo_server\$(configuration)\*.exe
    name: ma_qt_echo_server
  - path: build\test\ma_async_connect_test\$(configuration)\*.exe
    name: ma_async_connect_test
  - path: build\test\ma_handler_storage_test\$(configuration)\*.exe
    name: ma_handler_storage_test
  - path: build\test\ma_lockable_wrapper_test\$(configuration)\*.exe
    name: ma_lockable_wrapper_test
  - path: build\test\ma_shared_ptr_factory_test\$(configuration)\*.exe
    name: ma_shared_ptr_factory_test
  - path: build\test\ma_sp_singleton_test\$(configuration)\*.exe
    name: ma_sp_singleton_test
  - path: build\test\ma_windows_console_signal_test\$(configuration)\*.exe
    name: ma_windows_console_signal_test
